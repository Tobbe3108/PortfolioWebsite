@page "/Terminal"
@inject NavigationManager NavigationManager
@implements IDisposable
@using Toolbelt.Blazor.HotKeys
@inject HotKeys HotKeys
@using PortfolioWebsite.Client.Components

<div style="background: #edf2f7;">
    <div class="h-screen overflow-hidden flex items-center justify-center @(Animate ? " scale-down-bl" : "" )">
        <div style="font-family: Segoe UI; height: 50%;" class="w-2/3 mx-auto">
            <div class="w-full subpixel-antialiased bg-black border-black mx-auto h-full">
                <div class="flex justify-between bg-white border-b border-gray-500">
                    <div class="flex">
                        <span style="padding: 7px"><img height="13px" width="16px" src="img/icon.png"></span>
                        <p class="text-xs" style="padding-top: 4px;">Command Prompt</p>
                    </div>
                    <div class="flex">
                        <span class="p-2 px-3 hover:bg-gray-300"><img height="10px" width="10px" src="img/min.png"></span>
                        <span class="p-2 px-3 hover:bg-gray-300"><img height="10px" width="10px" src="img/max.png"></span>
                        <span class="p-2 px-3 hover:bg-red-500 invert"><img height="10px" width="10px" src="img/close.png"></span>
                    </div>
                </div>
                <div class="pl-1 pt-1 h-auto text-white font-mono text-xs bg-black">
                    <p class="pb-1">Microsoft Windows [Version 10.0.19041.113]</p>
                    <p class="pb-1">(c) 2020 Microsoft Corporation. All rights reserved.</p>
                    <p class="pb-1">&nbsp;</p>
                    <p class="pb-1">C:\Users\User1>Login as: @Username<Cursor charType="cursor" running="Running" Hidden="UserCursorHidden" /></p>
                    @if (!pwsHidden)
                    {
                        <p class="pb-1">C:\Users\User1>Password: @Password<Cursor charType="cursor" running="Running" Hidden="PwsCursorHidden" /></p>
                    }
                    @if (!downloadHidden)
                    {
                        <p class="pb-1">C:\Users\User1>@Download Downloading Website..</p>

                        if (!downloadText1Hidden)
                        {
                            <p class="pb-1">C:\Users\User1>Added 172 packages from 151 contributors and audited 419 packages in 6.614s</p>
                        }
                        if (!downloadText2Hidden)
                        {
                            <p class="pb-1">C:\Users\User1>Found 0 vulnerabilities</p>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
    <div class="absolute bottom-0" style="left: 50%; transform: translate(-50%, 0);">
        <p class="text-gray-500">Press Enter to skip intro</p>
    </div>
</div>

<style>
    .invert:hover > img {
        filter: invert(100%);
    }

    /* ----------------------------------------------
    * Generated by Animista on 2020-3-8 16:34:43
    * Licensed under FreeBSD License.
    * See http://animista.net/license for more info.
    * w: http://animista.net, t: @@cssanimista
    * ---------------------------------------------- */

    /**
    * ----------------------------------------
    * animation scale-down-bl
    * ----------------------------------------
    */
    .scale-down-bl {
        -webkit-animation: scale-down-bl 0.2s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;
        animation: scale-down-bl 0.2s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;
    }

    @@-webkit-keyframes scale-down-bl {
        0% {
            -webkit-transform: scale(1);
            transform: scale(1);
            -webkit-transform-origin: 0% 100%;
            transform-origin: 0% 100%;
        }

        100% {
            -webkit-transform: scale(0.5);
            transform: scale(0.5);
            -webkit-transform-origin: 0% 100%;
            transform-origin: 0% 100%;
        }
    }

    @@keyframes scale-down-bl {
        0% {
            -webkit-transform: scale(1);
            transform: scale(1);
            -webkit-transform-origin: 0% 100%;
            transform-origin: 0% 100%;
        }

        100% {
            -webkit-transform: scale(0.5);
            transform: scale(0.5);
            -webkit-transform-origin: 0% 100%;
            transform-origin: 0% 100%;
        }
    }
</style>

@code{
    #region Vars
    public string Username { get; set; }
    public string Password { get; set; }
    public string Download { get; set; } = "▱▱▱▱▱▱▱▱▱▱";
    string username = "admin";
    string password = "*****";
    public bool UserCursorHidden;
    public bool PwsCursorHidden;
    public bool pwsHidden { get; set; } = true;
    public bool downloadHidden { get; set; } = true;
    public bool downloadText1Hidden { get; set; } = true;
    public bool downloadText2Hidden { get; set; } = true;
    public bool Running { get; set; }
    public char cursor = '_';
    public bool Animate { get; set; } = false;
    #endregion

    HotKeysContext HotKeysContext;
    protected override void OnInitialized()
    {
        this.HotKeysContext = this.HotKeys.CreateContext()
          .Add(ModKeys.None, Keys.Enter, Skip, "To skip intro");
    }
    void Skip()
    {
        NavigationManager.NavigateTo("/");
    }
    public void Dispose()
    {
        this.HotKeysContext.Dispose();
    }

    protected override async Task OnInitializedAsync()
    {
        Running = true;
        UserCursorHidden = false;
        await Wait(1000);

        Running = false;
        await TypewriteUsername();

        Running = true;
        StateHasChanged();
        await Wait(250);

        UserCursorHidden = true;
        PwsCursorHidden = false;
        Running = false;
        pwsHidden = false;
        await TypewritePassword();

        Running = true;
        StateHasChanged();
        await Wait(250);

        PwsCursorHidden = true;
        downloadHidden = false;
        await DownloadAnimation();

        downloadText1Hidden = false;
        StateHasChanged();
        await Wait(250);

        downloadText2Hidden = false;
        StateHasChanged();
        await Wait(250);

        Animate = true;
        StateHasChanged();
        await Wait(100);
        NavigationManager.NavigateTo("/");
    }

    private async Task Wait(int milliseconds)
    {
        await Task.Delay(milliseconds);
    }

    private async Task TypewriteUsername()
    {
        Random random = new Random();
        var array = username.ToCharArray();
        for (int i = 0; i < username.Length; i++)
        {
            Username += array[i];
            StateHasChanged();
            await Task.Delay(random.Next(100, 250));
        }
    }

    private async Task TypewritePassword()
    {
        Random random = new Random();
        var array = password.ToCharArray();
        for (int i = 0; i < password.Length; i++)
        {
            Password += array[i];
            StateHasChanged();
            await Task.Delay(random.Next(100, 250));
        }
    }

    private async Task DownloadAnimation()
    {
        Random random = new Random();
        var array = Download.ToCharArray();
        for (int i = 0; i < Download.Length; i++)
        {
            array[i] = '▰';

            Download = new string(array);

            StateHasChanged();
            await Task.Delay(random.Next(100, 150));
        }
    }
}